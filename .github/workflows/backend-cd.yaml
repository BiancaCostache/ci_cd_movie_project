name: Backend Continous Deployment

# Ensure the workflow runs on either manual trigger or on push on main.
on:
  workflow_dispatch:

  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

# The workflow steps include installing dependencies, running tests, linting and building Docker.
    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Install dependencies.
      - name: Install dependencies
        working-directory: starter/backend 
        run:  |
          python -m pip install --upgrade pip
          pip install pipenv
          pip install flake8

      # Run the linter
      - name: Run the linter
        run: cd starter/backend && pipenv run lint


  test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Install dependencies.
      - name: Install dependencies
        working-directory: starter/backend 
        run:  |
          python -m pip install --upgrade pip
          pip install pipenv
          pip install flake8

      # Run the tests.
      - name: Test run
        run: cd starter/backend && pipenv install pytest && pipenv run test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPO_URL_BACKEND }}:${{ github.sha }} starter/backend
          docker tag ${{ secrets.ECR_REPO_URL_BACKEND }}:${{ github.sha }} ${{ secrets.ECR_REPO_URL_BACKEND }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL_BACKEND }}:${{ github.sha }}
          docker push ${{ secrets.ECR_REPO_URL_BACKEND }}:latest

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Update Kubernetes manifests with new image tag
        working-directory: starter/backend/k8s
        run: |
          kustomize edit set image backend=${{ secrets.ECR_REPO_URL_BACKEND }}:${{ github.sha }}

      - name: Apply Kubernetes manifests
        working-directory: starter/backend/k8s
        run: |
          kustomize build | kubectl apply -f -

      - name: Check for hardcoded AWS credentials
        run: |
          grep -rE 'AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY' .github/workflows || echo "No hardcoded AWS credentials found"
          if grep -rE 'AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY' .github/workflows; then
            echo "Hardcoded AWS credentials found. Failing the pipeline." && exit 1
          fi

      - name: Check if Docker image pushed to ECR
        run: |
          aws ecr describe-images --repository-name my-repo --image-ids imageTag=${{ github.sha }}
        continue-on-error: false


      - name: Verify application running on Kubernetes
        run: |
          kubectl rollout status deployment/my-deployment --timeout=60s || exit 1
          kubectl get pods | grep Running || exit 1


