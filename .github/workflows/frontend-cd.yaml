name: Frontend Continuous Deployment
# Ensure the workflow runs on either manual trigger or on push on main.
on:
  workflow_dispatch:

  # push:
  #   branches:
  #     - main
  #   paths:
  #    - 'starter/frontend/**'

env:
  REACT_APP_MOVIE_API_URL: http://localhost:5000

jobs:
  lint:
    runs-on: ubuntu-latest

# The workflow steps include installing dependencies, running tests, linting and building Docker.
    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up Node.js and restore cache for node_modules.
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      # Install the dependencies. 
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the linter
      - name: Run the linter
        run: cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the tests.
      - name: Test run
        run: cd starter/frontend && npm run test


  build:
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check repository
        uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Configure the AWS credentials.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Login into ECR Amazon.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build the Docker Image using the Git Hub Actions secrets.
      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{ secrets.ECR_REPO_URL_FRONTEND }}:${{ github.sha }} starter/frontend
      #     docker tag ${{ secrets.ECR_REPO_URL_FRONTEND }}:${{ github.sha }} ${{ secrets.ECR_REPO_URL_FRONTEND }}:latest


      # Build the Docker Image using the Git Hub Actions secrets.
      - name: Build Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPO_URL_FRONTEND }}
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_BACKEND_URL }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

       # Push the Docker Image into the ECR created backend repo.
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL_FRONTEND }}:${{ github.sha }}
          docker push ${{ secrets.ECR_REPO_URL_FRONTEND }}:latest

      # Update the kubeconfig for EKS purposes.
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Update the k8 manifests with the new image tag.
      - name: Update Kubernetes manifests with new image tag
        working-directory: starter/frontend/k8s
        run: |
          kustomize edit set image frontend=${{ secrets.ECR_REPO_URL_FRONTEND }}:${{ github.sha }}

      # Apply k8 manifests.
      - name: Apply Kubernetes manifests
        working-directory: starter/frontend/k8s
        run: |
          kustomize build | kubectl apply -f -
